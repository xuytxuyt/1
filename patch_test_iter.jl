
using ApproxOperator, CairoMakie, LinearAlgebra
include("input.jl")

elements, ùìë = import_tr("./msh/square_1.msh")
n‚Çö‚ÇÅ = 5
n‚Çö‚ÇÇ = 4
# n‚Çö‚ÇÅ = 16
# n‚Çö‚ÇÇ = 9

# plot and check elements
# f = Figure()
# Axis(f[1,1], autolimitaspect = 1)

# xs = Float64[]
# ys = Float64[]
# xg = Float64[]
# yg = Float64[]
# for a in elements["Œ©"]
#     ùìí = collect(a.ùìí)[[1,2,3,1]]
#     ùìñ = a.ùìñ
#     for x·µ¢ in ùìí
#         push!(xs,x·µ¢.x)
#         push!(ys,x·µ¢.y)
#     end
#     for Œæ in ùìñ
#         push!(xg,Œæ.x)
#         push!(yg,Œæ.y)
#     end
# end
# scatterlines!(xs,ys,width=2,color=:black,markercolor=:black,marksize=20)
# scatter!(xg,yg,marker=:xcross,marksize=20,color=:red)
# xg = Float64[]
# yg = Float64[]
# for a in elements["Œì·µç"]
#     ùìñ = a.ùìñ
#     for Œæ in ùìñ
#         push!(xg,Œæ.x)
#         push!(yg,Œæ.y)
#     end
# end
# scatter!(xg,yg,marker=:cross,marksize=20,color=:blue)
# f

set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œì·µç"])
setùù≠!(elements["Œì·µç"])
setùù≠!(elements["ŒìÃÑ·µç"])
set‚àáùù≠!(elements["Œì"])
setùù≠!(elements["Œì"])
setùù≠!(elements["ŒìÃÑ"])

# uÃÑ(x,y,z) = 1.0
# uÃÑ(x,y,z) = 1.0+2x+3y
# ‚àÇuÃÑ‚àÇx(x,y,z) = 2.0
# ‚àÇuÃÑ‚àÇy(x,y,z) = 3.0
# bÃÑ(x,y,z) = 0.0

# uÃÑ(x,y,z) = 1.0+2x+3y+4x^2+5x*y+6y^2
# ‚àÇuÃÑ‚àÇx(x,y,z) = 2.0+8x+5y
# ‚àÇuÃÑ‚àÇy(x,y,z) = 3.0+5x+12y
# bÃÑ(x,y,z) = -20.0

# uÃÑ(x,y,z) = 4x^2+5x*y+6y^2
# ‚àÇuÃÑ‚àÇx(x,y,z) = 8x+5y
# ‚àÇuÃÑ‚àÇy(x,y,z) = 5x+12y
# bÃÑ(x,y,z) = -20.0

uÃÑ(x,y,z) = 2x^2+1x*y+1y^2
‚àÇuÃÑ‚àÇx(x,y,z) = 4x+1y
‚àÇuÃÑ‚àÇy(x,y,z) = 1x+2y
bÃÑ(x,y,z) = -6.0

prescribe!(elements["Œì·µç"],:g=>uÃÑ)
prescribe!(elements["‚àÇŒ©"],:u=>uÃÑ)
# prescribe!(elements["Œì·µç"],:g=>(x,y,z)->1.0+2x+3y)
prescribe!(elements["Œ©"],:b=>bÃÑ)
prescribe!(elements["Œì"],:t=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->‚àÇuÃÑ‚àÇx(x,y,z)*n‚ÇÅ + ‚àÇuÃÑ‚àÇy(x,y,z)*n‚ÇÇ)
prescribe!(elements["Œì·µç"],:t=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->‚àÇuÃÑ‚àÇx(x,y,z)*n‚ÇÅ + ‚àÇuÃÑ‚àÇy(x,y,z)*n‚ÇÇ)

ops = [
    Operator{:‚à´‚à´‚àáv‚àáudxdy}(:k=>1.0),
    Operator{:‚à´vbdŒ©}(),
    Operator{:‚à´vtdŒì}(),
    Operator{:‚à´v·µ¢n·µ¢uds}(:k=>-1.0),
    Operator{:‚à´v·µ¢n·µ¢uds}(:k=>1.0),
    Operator{:‚à´v·µ¢n·µ¢gds}(:k=>1.0),
    Operator{:‚à´vgdŒì}(:Œ±=>1e7),
    Operator{:‚à´uds}(),
]

k = zeros(n‚Çö‚ÇÅ,n‚Çö‚ÇÅ)
f = zeros(n‚Çö‚ÇÅ)
d = zeros(n‚Çö‚ÇÅ)
k‚ÇÄ = zeros(n‚Çö‚ÇÅ,n‚Çö‚ÇÅ)
fint = zeros(n‚Çö‚ÇÅ)
f_Œì = zeros(n‚Çö‚ÇÅ)
f_Œ© = zeros(n‚Çö‚ÇÅ)
Œîd = zeros(n‚Çö‚ÇÅ)
fext = zeros(n‚Çö‚ÇÅ)
ftest = zeros(n‚Çö‚ÇÅ)

ops[1](elements["Œ©"],k‚ÇÄ)
ops[2](elements["Œ©"],f_Œ©)
ops[2](elements["Œ©"],fext)
ops[3](elements["Œì"],fext)
ops[3](elements["Œì·µç"],ftest)

u = ops[8](elements["‚àÇŒ©"])

index = [2,3,4,5]
# index = [2,3,7,9,11,12,15,16]
d[index] .= u[index]

# println(k‚ÇÄ*u-fext)

# println("iter 1")
# println(Œîd)
# println(f_Œ© - k‚ÇÄ*d)
# println(d - u)

# println(d - u)

# tol = 1e-10
# normŒîd = 1.0
# maxiter = 10

# iter = 0
# while normŒîd‚â•tol && iter‚â§maxiter
#     global iter += 1
    
#     k .= k‚ÇÄ
#     fint .= k‚ÇÄ*d
#     f .= f_Œ© - fint
#     if iter ‚â† 1
#         f[1] -= (f[2]+f[3]+f[4]+f[5])
#     end

#     for i in index
#         k[:,i] .= 0.
#         k[i,:] .= 0.
#         k[i,i] = 1.
#         f[i] = 0.0
#     end

#     Œîd .= k\f
#     d .+= Œîd
#     global normŒîd = norm(Œîd)
#     println("iter = $iter, norm = $normŒîd")
#     println(Œîd)
#     println(f_Œ© - k‚ÇÄ*d)
#     println(d - u)
# end


# r = k_Œì'*u


k .= k‚ÇÄ
fint .= k‚ÇÄ*d
f .= f_Œ© - fint
f[1] = -3.5 - fint[1]
# f[1] = -0.541666666666643 - fint[1]
# # f[1] = -4.04166666666666666666 - fint[1]
# f[1] = -10 - fint[1]
# f[1] = -11.874999999999995 - fint[1]

for i in index
    # f .-= k[:,i]*u[i]
    k[:,i] .= 0.
    k[i,:] .= 0.
    k[i,i] = 1.
    f[i] = 0.0
end

Œîd = k\f
# println(k‚ÇÄ*d-fext)
d .+= Œîd
# println(f)
# println(d)
println(f_Œ© - k‚ÇÄ*d)
println(sum((f_Œ© - k‚ÇÄ*d)[2:5])/2)
println(d-u)

# k .= k‚ÇÄ
# fint .= k‚ÇÄ*d
# f .= f_Œ© - fint
# f[1] = sum((f_Œ© - k‚ÇÄ*d)[2:5])/2 - fint[1]

# for i in index
#     k[:,i] .= 0.
#     k[i,:] .= 0.
#     k[i,i] = 1.
#     f[i] = 0.0
# end

# Œîd = k\f
# d .+= Œîd
# println(d-u)