
using ApproxOperator, CairoMakie, LinearAlgebra
include("input.jl")

# uÃÑ(x,y,z) = 1.0
# uÃÑ(x,y,z) = 1.0+2x+3y
# ‚àÇuÃÑ‚àÇx(x,y,z) = 2.
# ‚àÇuÃÑ‚àÇy(x,y,z) = 3.
# bÃÑ(x,y,z) = 0.0
uÃÑ(x,y,z) = 1.0+2x+3y+4x^2+5x*y+6y^2+7x^3+8x^2*y+9x*y^2+10y^3
‚àÇuÃÑ‚àÇx(x,y,z) = 2.0+8x+5y+21x^2+16x*y+9y^2
‚àÇuÃÑ‚àÇy(x,y,z) = 3.0+5x+12y+8x^2+18x*y+30y^2
bÃÑ(x,y,z) = -20.0-60x-76y
# uÃÑ(x,y,z) = 10x^2+9x*y+8y^2
# ‚àÇuÃÑ‚àÇx(x,y,z) = 20x+9y
# ‚àÇuÃÑ‚àÇy(x,y,z) = 9x+16y
# bÃÑ(x,y,z) = -36.0
# uÃÑ(x,y,z) = 0.5*x^2 + x*y
# ‚àÇuÃÑ‚àÇx(x,y,z) = x + y
# ‚àÇuÃÑ‚àÇy(x,y,z) = x
# bÃÑ(x,y,z) = -1.

ops = [
    Operator{:‚à´‚à´‚àáv‚àáudxdy}(:k=>1.0),
    Operator{:‚à´vbdŒ©}(),
    Operator{:‚à´vtdŒì}(),
    Operator{:‚à´v·µ¢n·µ¢uds}(:k=>-1.0),
    Operator{:‚à´v·µ¢n·µ¢uds}(:k=>1.0),
    Operator{:‚à´v·µ¢n·µ¢gds}(:k=>1.0),
    Operator{:‚à´vgdŒì}(:Œ±=>1e7),
    Operator{:‚à´uds}(),
]
op_debug = Operator{:‚à´vtdŒì_debug}()

# elements, ùìë = import_tr("./msh/square_1.msh")
elements, ùìë = import_tr("./msh/square_test_1.msh")
n‚Çö = 5
n‚Çö‚ÇÅ = 5
# n‚Çö‚ÇÇ = 9
# n‚Çö‚ÇÅ = 56
# n‚Çö‚ÇÇ = 25

index = [2,3,4,5]
# index = [2,3,7,9,11,12,15,16]
# index = [2,3,7,11,15,17,19,30,32,43,45,46,49,52,55,56]

set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œì·µç"])
setùù≠!(elements["Œì·µç"])
set‚àáùù≠!(elements["Œì"])
setùù≠!(elements["Œì"])

prescribe!(elements["Œì·µç"],:g=>uÃÑ)
prescribe!(elements["‚àÇŒ©"],:u=>uÃÑ)
prescribe!(elements["Œ©"],:b=>bÃÑ)
prescribe!(elements["Œì"],:g=>uÃÑ)
prescribe!(elements["Œì"],:t=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->‚àÇuÃÑ‚àÇx(x,y,z)*n‚ÇÅ + ‚àÇuÃÑ‚àÇy(x,y,z)*n‚ÇÇ)

u = ops[8](elements["‚àÇŒ©"])

k = zeros(n‚Çö,n‚Çö)
f = zeros(n‚Çö)
f‚Çú = zeros(n‚Çö)
ops[1](elements["Œ©"],k)
ops[2](elements["Œ©"],f)
# ops[3](elements["Œì"][3:3],f‚Çú)
op_debug(elements["Œì"][3:3],f‚Çú)

for i in index
    f .-= k[:,i]*u[i]
    k[:,i] .= 0.
    k[i,:] .= 0.
    k[i,i] = 1.
    f[i] = u[i]
end

d‚ÇÅ = k\f
println(norm(d‚ÇÅ-u)/n‚Çö)
k‚ÇÅ = k
invk‚ÇÅ = inv(k)
f‚Çú‚ÇÅ = f‚Çú
f‚Çú‚ÇÅ[index] .= 0.0
u‚ÇÅ = u
a = elements["Œì"][3]

k = zeros(n‚Çö,n‚Çö)
f = zeros(n‚Çö)
ops[1](elements["Œ©"],k)
ops[2](elements["Œ©"],f)
ops[3](elements["Œì"],f)
for i in index
    f .-= k[:,i]*u[i]
    k[:,i] .= 0.
    k[i,:] .= 0.
    k[i,i] = 1.
    f[i] = u[i]
end

d‚ÇÄ = k\f
println(norm(d‚ÇÄ-u)/n‚Çö‚ÇÅ)


# elements, ùìë = import_tr("./msh/square_2.msh")
elements, ùìë = import_tr("./msh/square_test_2.msh")
# n‚Çö = 5
n‚Çö = 16
# n‚Çö = 56
n‚Çö‚ÇÇ = n‚Çö

# index = [2,3,4,5]
index = [2,3,7,9,11,12,15,16]
# index = [2,3,7,11,15,17,19,30,32,43,45,46,49,52,55,56]

set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œì·µç"])
setùù≠!(elements["Œì·µç"])
set‚àáùù≠!(elements["Œì"])
setùù≠!(elements["Œì"])

prescribe!(elements["Œì·µç"],:g=>uÃÑ)
prescribe!(elements["‚àÇŒ©"],:u=>uÃÑ)
prescribe!(elements["Œ©"],:b=>bÃÑ)
prescribe!(elements["Œì"],:g=>uÃÑ)
prescribe!(elements["Œì"],:t=>(x,y,z,n‚ÇÅ,n‚ÇÇ)->‚àÇuÃÑ‚àÇx(x,y,z)*n‚ÇÅ + ‚àÇuÃÑ‚àÇy(x,y,z)*n‚ÇÇ)

u = ops[8](elements["‚àÇŒ©"])

k = zeros(n‚Çö,n‚Çö)
f = zeros(n‚Çö)
f‚Çú = zeros(n‚Çö)
ops[1](elements["Œ©"],k)
ops[2](elements["Œ©"],f)
ops[3](elements["Œì"],f‚Çú)

for i in index
    f .-= k[:,i]*u[i]
    k[:,i] .= 0.
    k[i,:] .= 0.
    k[i,i] = 1.
    f[i] = u[i]
end

d‚ÇÇ = k\f
println(norm(d‚ÇÇ-u)/n‚Çö)
k‚ÇÇ = k
invk‚ÇÇ = inv(k)
f‚Çú‚ÇÇ = f‚Çú
f‚Çú‚ÇÇ[index] .= 0.
u‚ÇÇ = u

invk‚ÇÇ‚ÇÅ = zeros(n‚Çö‚ÇÅ,n‚Çö‚ÇÇ)
invk‚ÇÇ‚ÇÇ = zeros(n‚Çö‚ÇÅ,n‚Çö‚ÇÅ)
fc = zeros(n‚Çö‚ÇÅ)
checkf = zeros(n‚Çö‚ÇÅ)

invk‚ÇÇ‚ÇÅ[1,:] .= (invk‚ÇÇ[6,:] + invk‚ÇÇ[10,:])/2
invk‚ÇÇ‚ÇÅ[2,:] .= (invk‚ÇÇ[7,:] + invk‚ÇÇ[2,:])/2
invk‚ÇÇ‚ÇÅ[3,:] .= (invk‚ÇÇ[3,:] + invk‚ÇÇ[11,:])/2
invk‚ÇÇ‚ÇÅ[4,:] .= (invk‚ÇÇ[12,:] + invk‚ÇÇ[15,:])/2
invk‚ÇÇ‚ÇÅ[5,:] .= (invk‚ÇÇ[9,:] + invk‚ÇÇ[16,:])/2

invk‚ÇÇ‚ÇÇ[:,1] .= (invk‚ÇÇ‚ÇÅ[:,1] + invk‚ÇÇ‚ÇÅ[:,6] + invk‚ÇÇ‚ÇÅ[:,10] + invk‚ÇÇ‚ÇÅ[:,14])
invk‚ÇÇ‚ÇÇ[:,2] .= (invk‚ÇÇ‚ÇÅ[:,2] + invk‚ÇÇ‚ÇÅ[:,4] + invk‚ÇÇ‚ÇÅ[:,7])
invk‚ÇÇ‚ÇÇ[:,3] .= (invk‚ÇÇ‚ÇÅ[:,3] + invk‚ÇÇ‚ÇÅ[:,11] + invk‚ÇÇ‚ÇÅ[:,5])
invk‚ÇÇ‚ÇÇ[:,4] .= (invk‚ÇÇ‚ÇÅ[:,8] + invk‚ÇÇ‚ÇÅ[:,12] + invk‚ÇÇ‚ÇÅ[:,15])
invk‚ÇÇ‚ÇÇ[:,5] .= (invk‚ÇÇ‚ÇÅ[:,9] + invk‚ÇÇ‚ÇÅ[:,13] + invk‚ÇÇ‚ÇÅ[:,16])

# c‚ÇÅ = f‚ÇÅ[1]
# c‚ÇÇ = (f‚ÇÇ[6]+f‚ÇÇ[10])/2
# d = (d‚ÇÇ[6] + d‚ÇÇ[10])/2*c‚ÇÅ/(c‚ÇÅ-c‚ÇÇ) - d‚ÇÅ[1]*c‚ÇÇ/(c‚ÇÅ-c‚ÇÇ)
# println(d)

checkf[1] = f‚Çú‚ÇÅ[1] - f‚Çú‚ÇÇ[1] - f‚Çú‚ÇÇ[6] - f‚Çú‚ÇÇ[10] - f‚Çú‚ÇÇ[14]
checkf[2] = f‚Çú‚ÇÅ[2] - f‚Çú‚ÇÇ[2] - f‚Çú‚ÇÇ[4] - f‚Çú‚ÇÇ[7]
checkf[3] = f‚Çú‚ÇÅ[3] - f‚Çú‚ÇÇ[3] - f‚Çú‚ÇÇ[11] - f‚Çú‚ÇÇ[5]
checkf[4] = f‚Çú‚ÇÅ[4] - f‚Çú‚ÇÇ[8] - f‚Çú‚ÇÇ[12] - f‚Çú‚ÇÇ[15]
checkf[5] = f‚Çú‚ÇÅ[5] - f‚Çú‚ÇÇ[9] - f‚Çú‚ÇÇ[13] - f‚Çú‚ÇÇ[16]
f‚ÇÅ = invk‚ÇÅ*f‚Çú‚ÇÅ
f‚ÇÇ = invk‚ÇÇ*f‚Çú‚ÇÇ
println(norm(u‚ÇÅ-(d‚ÇÅ+f‚ÇÅ)))
println(norm(u‚ÇÇ-(d‚ÇÇ+f‚ÇÇ)))
c‚ÇÅ = f‚ÇÅ[1]
c‚ÇÇ = (f‚ÇÇ[6]+f‚ÇÇ[10])/2
d = (d‚ÇÇ[6] + d‚ÇÇ[10])/2*c‚ÇÅ/(c‚ÇÅ-c‚ÇÇ) - d‚ÇÅ[1]*c‚ÇÇ/(c‚ÇÅ-c‚ÇÇ)
println(d-u‚ÇÅ[1])
println(c‚ÇÅ/(c‚ÇÅ-c‚ÇÇ))